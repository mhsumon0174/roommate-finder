import "./chunk-5WRI5ZAA.js";

// node_modules/daisyui/components/link/object.js
var object_default = { ".link": { "cursor": "pointer", "text-decoration-line": "underline", "&:focus": { "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { "outline": "2px solid transparent", "outline-offset": "2px" } }, "&:focus-visible": { "outline": "2px solid currentColor", "outline-offset": "2px" } }, ".link-hover": { "text-decoration-line": "none", "&:hover": { "@media (hover: hover)": { "text-decoration-line": "underline" } } }, ".link-primary": { "color": "var(--color-primary)", "@media (hover: hover)": { "&:hover": { "color": "color-mix(in oklab, var(--color-primary) 80%, #000)" } } }, ".link-secondary": { "color": "var(--color-secondary)", "@media (hover: hover)": { "&:hover": { "color": "color-mix(in oklab, var(--color-secondary) 80%, #000)" } } }, ".link-accent": { "color": "var(--color-accent)", "@media (hover: hover)": { "&:hover": { "color": "color-mix(in oklab, var(--color-accent) 80%, #000)" } } }, ".link-neutral": { "color": "var(--color-neutral)", "@media (hover: hover)": { "&:hover": { "color": "color-mix(in oklab, var(--color-neutral) 80%, #000)" } } }, ".link-success": { "color": "var(--color-success)", "@media (hover: hover)": { "&:hover": { "color": "color-mix(in oklab, var(--color-success) 80%, #000)" } } }, ".link-info": { "color": "var(--color-info)", "@media (hover: hover)": { "&:hover": { "color": "color-mix(in oklab, var(--color-info) 80%, #000)" } } }, ".link-warning": { "color": "var(--color-warning)", "@media (hover: hover)": { "&:hover": { "color": "color-mix(in oklab, var(--color-warning) 80%, #000)" } } }, ".link-error": { "color": "var(--color-error)", "@media (hover: hover)": { "&:hover": { "color": "color-mix(in oklab, var(--color-error) 80%, #000)" } } } };

// node_modules/daisyui/functions/addPrefix.js
var defaultExcludedPrefixes = ["color-", "size-", "radius-", "border", "depth", "noise"];
var shouldExcludeVariable = (variableName, excludedPrefixes) => {
  if (variableName.startsWith("tw")) {
    return true;
  }
  return excludedPrefixes.some((excludedPrefix) => variableName.startsWith(excludedPrefix));
};
var prefixVariable = (variableName, prefix, excludedPrefixes) => {
  if (shouldExcludeVariable(variableName, excludedPrefixes)) {
    return variableName;
  }
  return `${prefix}${variableName}`;
};
var getPrefixedSelector = (selector, prefix) => {
  if (!selector.startsWith(".")) return selector;
  return `.${prefix}${selector.slice(1)}`;
};
var getPrefixedKey = (key, prefix, excludedPrefixes) => {
  const prefixAmpDot = prefix ? `&.${prefix}` : "";
  if (!prefix) return key;
  if (key.startsWith("--")) {
    const variableName = key.slice(2);
    return `--${prefixVariable(variableName, prefix, excludedPrefixes)}`;
  }
  if (key.startsWith("@") || key.startsWith("[")) {
    return key;
  }
  if (key.startsWith("&")) {
    if (key.match(/:[a-z-]+\(/)) {
      return key.replace(/\.([\w-]+)/g, `.${prefix}$1`);
    }
    if (key.startsWith("&.")) {
      return `${prefixAmpDot}${key.slice(2)}`;
    }
    return key.replace(/\.([\w-]+)/g, `.${prefix}$1`);
  }
  if (key.startsWith(":")) {
    return key.replace(/\.([\w-]+)/g, `.${prefix}$1`);
  }
  if (key.includes(".") && !key.includes(" ") && !key.includes(">") && !key.includes("+") && !key.includes("~")) {
    return key.split(".").filter(Boolean).map((part) => prefix + part).join(".").replace(/^/, ".");
  }
  if (key.includes(">") || key.includes("+") || key.includes("~")) {
    if (key.includes(",")) {
      return key.split(/\s*,\s*/).map((part) => {
        return part.replace(/\.([\w-]+)/g, `.${prefix}$1`);
      }).join(", ");
    }
    let processedKey = key.replace(/\.([\w-]+)/g, `.${prefix}$1`);
    if (processedKey.startsWith(">") || processedKey.startsWith("+") || processedKey.startsWith("~")) {
      processedKey = ` ${processedKey}`;
    }
    return processedKey;
  }
  if (key.includes(" ")) {
    return key.split(/\s+/).map((part) => {
      if (part.startsWith(".")) {
        return getPrefixedSelector(part, prefix);
      }
      return part;
    }).join(" ");
  }
  if (key.includes(":")) {
    const [selector, ...pseudo] = key.split(":");
    if (selector.startsWith(".")) {
      return `${getPrefixedSelector(selector, prefix)}:${pseudo.join(":")}`;
    }
    return key.replace(/\.([\w-]+)/g, `.${prefix}$1`);
  }
  if (key.startsWith(".")) {
    return getPrefixedSelector(key, prefix);
  }
  return key;
};
var processArrayValue = (value, prefix, excludedPrefixes) => {
  return value.map((item) => {
    if (typeof item === "string") {
      if (item.startsWith(".")) {
        return prefix ? `.${prefix}${item.slice(1)}` : item;
      }
      return processStringValue(item, prefix, excludedPrefixes);
    }
    return item;
  });
};
var processStringValue = (value, prefix, excludedPrefixes) => {
  if (prefix === 0) return value;
  return value.replace(/var\(--([^)]+)\)/g, (match, variableName) => {
    if (shouldExcludeVariable(variableName, excludedPrefixes)) {
      return match;
    }
    return `var(--${prefix}${variableName})`;
  });
};
var processValue = (value, prefix, excludedPrefixes) => {
  if (Array.isArray(value)) {
    return processArrayValue(value, prefix, excludedPrefixes);
  } else if (typeof value === "object" && value !== null) {
    return addPrefix(value, prefix, excludedPrefixes);
  } else if (typeof value === "string") {
    return processStringValue(value, prefix, excludedPrefixes);
  } else {
    return value;
  }
};
var addPrefix = (obj, prefix, excludedPrefixes = defaultExcludedPrefixes) => {
  return Object.entries(obj).reduce((result, [key, value]) => {
    const newKey = getPrefixedKey(key, prefix, excludedPrefixes);
    result[newKey] = processValue(value, prefix, excludedPrefixes);
    return result;
  }, {});
};

// node_modules/daisyui/components/link/index.js
var link_default = ({ addComponents, prefix = "" }) => {
  const prefixedlink = addPrefix(object_default, prefix);
  addComponents({ ...prefixedlink });
};
export {
  link_default as default
};
//# sourceMappingURL=daisyui_components_link.js.map
